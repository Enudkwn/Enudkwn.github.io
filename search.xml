<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java基础面试题</title>
    <url>/2025/03/05/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<p>(总结于<a href="https://xiaolincoding.com/interview/java.html">小林coding</a>，缩减了部分内容，仅供学习参考，正在更新中)</p>
<h1 id="概念相关"><a href="#概念相关" class="headerlink" title="概念相关"></a>概念相关</h1><h2 id="Java的特点"><a href="#Java的特点" class="headerlink" title="Java的特点"></a>Java的特点</h2><ol>
<li><strong>平台无关性</strong>：Java编译器将源码编译为字节码，字节码可以在任何装有Java虚拟机的平台上运行，不需要重新编译。</li>
<li><strong>面向对象</strong>：Java是一门严格面向对象的语言，几乎一切都是对象。面向对象编程（OOP）特性使得代码更易于维护和重用。</li>
<li><strong>内存管理</strong>：Java有自己的垃圾回收机制，自动管理内存和不再使用的对象。开发者不用手动管理内存，减少了内存泄露和其他内存相关的问题。</li>
</ol>
<h2 id="Java为什么能跨平台"><a href="#Java为什么能跨平台" class="headerlink" title="Java为什么能跨平台"></a>Java为什么能跨平台</h2><p>这主要依赖于Java虚拟机（JVM），开发者编写的Java源代码经编译后得到.class文件，即字节码文件。Java虚拟机可以将字节码翻译为特定平台下的机器码。</p>
<p>所以运行Java程序必须要有JVM支持，即使将Java程序打包为可执行文件（例如.exe），它也需要JVM的支持。</p>
<p>跨平台的是Java程序，而JVM是用C&#x2F;C++编写的，不可跨平台，不同平台需要安装适合的JVM。</p>
<h2 id="JVM-JRE-JDK的关系"><a href="#JVM-JRE-JDK的关系" class="headerlink" title="JVM,JRE,JDK的关系"></a>JVM,JRE,JDK的关系</h2><ul>
<li><strong>JVM</strong>：略</li>
<li><strong>JDK</strong>是Java开发工具包，包含了JVM，编译器，调试器等开发工具，以及一系列的类库（如Java标准库和开发工具库）。即JDK提供了开发、编译、调试和运行Java程序的所需的全部工具和环境。</li>
<li><strong>JRE</strong>是Java运行时环境，是Java程序运行的最小环境，包含了JVM和Java标准库。JRE不包含开发工具，只包含运行Java程序所需的最小环境。</li>
</ul>
<h2 id="为什么Java解释和编译都有"><a href="#为什么Java解释和编译都有" class="headerlink" title="为什么Java解释和编译都有"></a>为什么Java解释和编译都有</h2><ul>
<li><strong>解释性</strong>：Java源代码被编译为字节码，JIT会把编译过的机器码保存下来下次使用。</li>
<li><strong>编译性</strong>：JVM中有方法调用计数器，当调用次数达到一定阈值时，JVM会使用JIT编译字节码为机器码，下次再调用时直接执行机器码，提高性能。否则就是用解释器进行解释执行。</li>
</ul>
<h2 id="编译型语言和解释型语言的区别"><a href="#编译型语言和解释型语言的区别" class="headerlink" title="编译型语言和解释型语言的区别"></a>编译型语言和解释型语言的区别</h2><ul>
<li><strong>编译型语言</strong>：编译型语言在编译时将源代码编译为目标代码（如机器码），然后再运行目标代码。编译型语言在编译时进行优化，提高性能，但跨平台性差。</li>
<li><strong>解释型语言</strong>：解释型语言在运行时解释执行源代码，无需编译为目标代码。解释型语言在运行时进行优化，跨平台性好，但性能较低。</li>
</ul>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="八种基本的数据类型"><a href="#八种基本的数据类型" class="headerlink" title="八种基本的数据类型"></a>八种基本的数据类型</h2><p>Java支持的数据类分为两类：基本数据类型和引用数据类型</p>
<p>基本数据类型有8中，可分为3类：</p>
<ul>
<li>数值型：整数型（byte，short，int，long），浮点型（float，double）</li>
<li>字符型：char</li>
<li>布尔型：boolean</li>
</ul>
<p>引用数据类型有：类、接口、数组…</p>
<ul>
<li>注意：<ol>
<li>1字节（byte,boolean），2字节（short,char），4字节（int，float），8字节（long，double）</li>
<li>浮点数的默认值为double，若需要float，需在末尾加上f或F。</li>
<li>整型默认为int，若需要byte，short，long，需在末尾加上b、s、l。</li>
<li>八种数据类型的包装类：除了char-&gt;Character、int-&gt;Integer，其他都是基本数据类型首字母大写。</li>
<li>char类型是无符号的，不能为负，所以0开头</li>
</ol>
</li>
</ul>
<h2 id="int和long之间的转换"><a href="#int和long之间的转换" class="headerlink" title="int和long之间的转换"></a>int和long之间的转换</h2><ul>
<li><strong>int转long</strong>：long数据类型的范围比int大，因此long转int是安全的，可通过直接赋值和强制类型转换实现。</li>
<li><strong>long转int</strong>：long转为int可能会出现数据丢失或溢出的问题，若转换的数据超出int类型的范围，转换的结果是阶段后低位部分。</li>
</ul>
<h2 id="数据类型转换方式"><a href="#数据类型转换方式" class="headerlink" title="数据类型转换方式"></a>数据类型转换方式</h2><ul>
<li><strong>自动类型转换(隐式转换)</strong>：目标类型范围大于源类型时，Java会自动将源类型转换为目标类型</li>
<li><strong>强制类型转换(显式转换)</strong>：目标类型范围小于源类型时，需要使用强制类型转换，这可能导致数据丢失或溢出</li>
<li><strong>字符串转换</strong>：Java提供了将字符串转换为其他数据类型的方法，如Integer.parseInt()、Double.parseDouble()等</li>
<li><strong>数值之间转换</strong>：Java提供了将数值转换为其他数据类型的方法，如Integer.valueOf()、Double.valueOf()等</li>
</ul>
<h2 id="类型互换可能会出现那些问题"><a href="#类型互换可能会出现那些问题" class="headerlink" title="类型互换可能会出现那些问题"></a>类型互换可能会出现那些问题</h2><ul>
<li><strong>数据丢失</strong>：如果目标类型范围小于源类型范围，可能会出现数据丢失的情况</li>
<li><strong>数据溢出</strong>：如果目标类型范围大于源类型范围，可能会出现数据溢出的情况，转换的结果会额外填充高位部分，但源石数据爆粗不变</li>
<li><strong>精度损失</strong>：在进行浮点类型的转换时，可能发生精度损失</li>
<li><strong>类型不匹配</strong>：在进行类型转换时，需要确保源类型和目标类型是兼容的</li>
</ul>
<h2 id="为什么使用BigDecimal不用Double"><a href="#为什么使用BigDecimal不用Double" class="headerlink" title="为什么使用BigDecimal不用Double"></a>为什么使用BigDecimal不用Double</h2><p>double会出现精度丢失的问题，double执行的是二进制浮点运算，二进制在有些情况不能准确表示小数，就像十进制不能准确表示1&#x2F;3，也就是说二进制表示小数只能表示(1&#x2F;2)^n的任意组合</p>
<p>这就会导致可能出现0.6无法购买0.5和0.1的商品</p>
<p>而BigDecimal是使用字符串表示的，可以进行精确计算</p>
<h2 id="装箱和拆箱是什么"><a href="#装箱和拆箱是什么" class="headerlink" title="装箱和拆箱是什么"></a>装箱和拆箱是什么</h2><p>装箱(boxing)和拆箱(unboxing)是指将基本数据类型和对应的包装类之间进行转换的过程</p>
<p>赋值时，Java1.5以后，所有的装箱和拆箱都是有编译器完成，进行自动装箱和拆箱</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i;<span class="comment">//自动拆箱</span></span><br></pre></td></tr></table></figure>
<p>方法调用时，可以直接传入原始数据或对象，编译器同样会进行转换</p>
<p><strong>自动装箱的弊端</strong></p>
<p>在一个循环中进行自动装箱，会产生多于的对象影响程序的性能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)&#123; sum+=i; &#125;</span><br></pre></td></tr></table></figure>
<p>sum + i 中的 + 不适用于Integer对象，程序运行时会先将sum自动拆箱，再进行数值相加的操作，然后再进行自动装箱的操作转换为Integer对象，类似于</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> sum.intValue() + i;<span class="type">Integer</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(result);</span><br></pre></td></tr></table></figure>
<p>故会在循环中产生大量无用的Integer对象，降低了程序的性能、加重了垃圾回收的工作量</p>
<h2 id="Java为什么需要Integer"><a href="#Java为什么需要Integer" class="headerlink" title="Java为什么需要Integer"></a>Java为什么需要Integer</h2><p>将int类型包装为Integer对象好处很多，可以把属性(也就是数据)和处理数据的方法结合在一起，例如parseInt()方法</p>
<p>还有个重要原因就是Java中绝大部分方法或类都是用来处理类类型对象的，例如ArrayList集合类只能以类作为它的存储对象</p>
<p><strong>泛型中的应用</strong>：在Java中泛型只能使用引用类型</p>
<p><strong>转换中的应用</strong>：Java中基本数据类型和引用类型不能直接进行转换，必须通过包装类实现</p>
<p><strong>集合中的应用</strong>：在Java中集合类中的泛型只能是引用类型，不能是基本数据类型</p>
<h2 id="int和Integer的区别"><a href="#int和Integer的区别" class="headerlink" title="int和Integer的区别"></a>int和Integer的区别</h2><ul>
<li><p><strong>基本数据类型和引用类型</strong>：int是基本数据类型，不需要实例化，不用额外分配内存；Integer是引用类型，对象的引用和对象是分开存储的</p>
</li>
<li><p><strong>自动装箱拆箱</strong>：略</p>
</li>
<li><p><strong>空指针异常</strong>：Integer对象可以表示null，int不能表示null。对被赋予null值的Integer对象进行操作会出现空指针异常</p>
</li>
</ul>
<h2 id="Integer缓存"><a href="#Integer缓存" class="headerlink" title="Integer缓存"></a>Integer缓存</h2><p>Java的Integer类内部实现了一个静态缓存池，用于存储特定范围内的整数值对应的Integer对象</p>
<p>默认情况下，这个范围为-128至127，即在-128至127之间的整数值，都会被缓存在静态缓存池中，避免每次创建新的Integer对象，提高性能。可通过Integer.valueOf()方法来获取缓存池中的Integer对象，如果缓存池中不存在对应的Integer对象，则创建一个新的对象并放入缓存池中。</p>
<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="如何理解面向对象，简单说说封装继承多态"><a href="#如何理解面向对象，简单说说封装继承多态" class="headerlink" title="如何理解面向对象，简单说说封装继承多态"></a>如何理解面向对象，简单说说封装继承多态</h2><p>面向对象是一种编程范式，它将现实中的事物抽象为对象，对象具有属性和方法。面向对象的设计思想是以对象为中心，通过对象之间的交互来完成程序的功能，具有灵活性和可扩展性，通过封装和继承可以更好地应对需求变化</p>
<p>Java面向对象的三大特性：<strong>封装、继承、多态</strong>：</p>
<ul>
<li><strong>封装</strong>：封装是指将对象的属性和方法结合在一起，对外隐藏内部的细节，仅通过对象提供的接口与外界交互。增强了安全性并简化编程，使对象更加独立</li>
<li><strong>继承</strong>：继承是指子类可以继承父类的属性和方法，从而实现代码的重用。子类可以扩展父类的功能，也可以覆盖父类的方法，从而实现代码的复用。</li>
<li><strong>多态</strong>：多态是指一个对象在不同的情况下具有不同的行为，即对象的行为可以根据对象的状态或者类型而发生变化。多态性可分为编译时多态(重载)和运行时多态(重写)。多态使得对象的行为更加灵活和可扩展，从而提高程序的可维护性。</li>
</ul>
<p>多态表现于：</p>
<ul>
<li>方法重载：<ul>
<li>方法重载是指在同一个类中定义多个同名方法，但参数列表不同(参数类型、个数、顺序)，编译时根据参数列表选择对应的方法进行调用。</li>
<li>示例：对于一个 add 方法，可以定义为 add(int a, int b) 和 add(double a, double b)</li>
</ul>
</li>
<li>方法重写：<ul>
<li>方法重写是指子类重写父类的方法，使得子类具有父类方法的功能，但可以扩展或修改父类方法的实现。在运行时，JVM会根据对象的实际类型来决定调用哪个方法。</li>
<li>示例：对于一个 Animal 类，可以定义一个 eat 方法，子类 Cat 和 Dog 都可以重写这个方法，使得 Cat 和 Dog 的 eat 方法具有不同的实现。</li>
</ul>
</li>
<li>接口与实现：<ul>
<li>多个类可以实现同一个接口，并且用接口类型的引用来调用这些类的方法。这使得程序在面对不同的实现时，保持。一贯的调用方式</li>
<li>示例：定义一个接口 Animal，包含一个 eat 方法，然后定义两个实现类 Cat 和 Dog，实现 Animal 接口，使得 Cat 和 Dog 具有 eat 方法。</li>
</ul>
</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>Java面试题</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试</tag>
        <tag>Java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>MILABO歌词翻译学习</title>
    <url>/2025/03/09/MILABO%E6%AD%8C%E8%AF%8D%E7%BF%BB%E8%AF%91%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="バレたくはないから歌わないけど"><a href="#バレたくはないから歌わないけど" class="headerlink" title="バレたくはないから歌わないけど"></a>バレたくはないから歌わないけど</h1><p>ba re ta ku wa na i ka ra u ta wa na i ke do<br>不想歌唱是因为我不愿展露</p>
<hr>
<h2 id="一、核心词汇"><a href="#一、核心词汇" class="headerlink" title="一、核心词汇"></a>一、核心词汇</h2><table>
<thead>
<tr>
<th>日语词汇</th>
<th>假名标注</th>
<th>中文翻译</th>
<th>词性&#x2F;功能</th>
<th>学习重点</th>
</tr>
</thead>
<tbody><tr>
<td>バレたく</td>
<td>ばれたく</td>
<td>不想暴露</td>
<td>动词否定愿望形</td>
<td>动词「バレる」（暴露）的变形</td>
</tr>
<tr>
<td>は</td>
<td>は</td>
<td>（强调助词）</td>
<td>助词</td>
<td>表对比或强调，用于突出否定</td>
</tr>
<tr>
<td>ない</td>
<td>ない</td>
<td>不</td>
<td>否定助动词</td>
<td>基础否定后缀</td>
</tr>
<tr>
<td>から</td>
<td>から</td>
<td>因为</td>
<td>接续助词</td>
<td>因果关系表达</td>
</tr>
<tr>
<td>歌わない</td>
<td>うたわない</td>
<td>不唱歌</td>
<td>动词否定形</td>
<td>动词「歌う」（唱歌）的否定形</td>
</tr>
<tr>
<td>けど</td>
<td>けど</td>
<td>但是</td>
<td>转折助词</td>
<td>口语化表达，暗示未言明的情绪</td>
</tr>
</tbody></table>
<h2 id="二、核心句型"><a href="#二、核心句型" class="headerlink" title="二、核心句型"></a>二、核心句型</h2><p><strong>「～たくないから～ないけど」</strong></p>
<ul>
<li><p><strong>结构</strong>：<br>[动词ます形（去掉ます） + たくない] + から + [动词ない形] + けど</p>
</li>
<li><p><strong>意义</strong>：<br><strong>“因为不想做A，所以不做B，但…”</strong>（隐含矛盾或未完全表达的内容）</p>
</li>
</ul>
<h2 id="三-语法要点"><a href="#三-语法要点" class="headerlink" title="三. 语法要点"></a>三. 语法要点</h2><ul>
<li><p><strong>愿望否定形「～たくない」</strong><br>表示“不想做某事”，常用于第一人称。</p>
<blockquote>
<p>例：食べ<strong>たくない</strong>（不想吃）——食（た）</p>
</blockquote>
</li>
<li><p><strong>因果关系「～から」</strong><br>连接前后句，强调原因导致结果。</p>
<blockquote>
<p>例：寒い<strong>から</strong>窓を閉める（因为冷，所以关窗）——寒（ひ）窓（か）閉（し）</p>
</blockquote>
</li>
<li><p><strong>转折助词「けど」</strong><br>句末使用，暗示委婉转折或未尽之意。</p>
<blockquote>
<p>例：行きたい<strong>けど</strong>…（我想去，不过…）——行（い）</p>
</blockquote>
</li>
</ul>
<h2 id="四、学习建议"><a href="#四、学习建议" class="headerlink" title="四、学习建议"></a>四、学习建议</h2><ol>
<li><strong>重点记忆词汇</strong>：</li>
</ol>
<ul>
<li>必背动词：<strong>歌う</strong>（唱歌）、<strong>バレる</strong>（暴露）</li>
<li>基础助词：<strong>は</strong>（强调）、<strong>から</strong>（因为）、<strong>けど</strong>（但是）</li>
</ul>
<h2 id="五、扩展例句"><a href="#五、扩展例句" class="headerlink" title="五、扩展例句"></a>五、扩展例句</h2><ul>
<li><p><strong>食べたくはないから食べないけど</strong>——食（た）<br>（因为不想吃，所以不吃，但…）</p>
</li>
<li><p><strong>行きたくはないから家にいるけど</strong>——行（い）家（いえ）<br>（因为不想去，所以待在家，但…）</p>
</li>
</ul>
<hr>
<h1 id="想ってないとかじゃないの"><a href="#想ってないとかじゃないの" class="headerlink" title="想ってないとかじゃないの"></a>想ってないとかじゃないの</h1><p>o mo tte na i to ka ja na i no<br>并不是没有这么想过啊</p>
<hr>
<h2 id="一、核心词汇-1"><a href="#一、核心词汇-1" class="headerlink" title="一、核心词汇"></a>一、核心词汇</h2><table>
<thead>
<tr>
<th>日语词汇</th>
<th>假名标注</th>
<th>中文翻译</th>
<th>词性&#x2F;功能</th>
<th>学习重点</th>
</tr>
</thead>
<tbody><tr>
<td>想ってない</td>
<td>おもってない</td>
<td>没有在想</td>
<td>动词否定持续体</td>
<td>「思う」的否定+持续体（～ていない）</td>
</tr>
<tr>
<td>とか</td>
<td>とか</td>
<td>之类的</td>
<td>并列助词</td>
<td>表不确定、模糊化表达</td>
</tr>
<tr>
<td>じゃない</td>
<td>じゃない</td>
<td>不是</td>
<td>否定断定</td>
<td>「ではない」的口语缩略形</td>
</tr>
<tr>
<td>の</td>
<td>の</td>
<td>（语气词）</td>
<td>终助词</td>
<td>加强语气或表达解释&#x2F;反问</td>
</tr>
</tbody></table>
<h2 id="二、核心句型-1"><a href="#二、核心句型-1" class="headerlink" title="二、核心句型"></a>二、核心句型</h2><p><strong>「～てないとかじゃないの」</strong></p>
<ul>
<li><p><strong>结构</strong>：<br>[动词て形] + ない（否定） + とか（模糊化） + じゃない（否定断定） + の（语气词）</p>
</li>
<li><p><strong>意义</strong>：<br><strong>“并不是说没有…啊”</strong>（通过双重否定和模糊化表达委婉反驳）</p>
</li>
</ul>
<h2 id="三、语法要点"><a href="#三、语法要点" class="headerlink" title="三、语法要点"></a>三、语法要点</h2><h3 id="1-持续体否定「～ていない→～てない」"><a href="#1-持续体否定「～ていない→～てない」" class="headerlink" title="1. 持续体否定「～ていない→～てない」"></a>1. <strong>持续体否定「～ていない→～てない」</strong></h3><p>口语中常省略「い」，表动作未发生或状态未持续。</p>
<blockquote>
<p>例：<br>食べ<strong>てない</strong>（没在吃）——食（た）<br>知ら<strong>ない</strong>（单纯否定） vs 知ら<strong>せてない</strong>（持续否定：没告诉）——知（し）</p>
</blockquote>
<h3 id="2-模糊化助词「とか」"><a href="#2-模糊化助词「とか」" class="headerlink" title="2. 模糊化助词「とか」"></a>2. <strong>模糊化助词「とか」</strong></h3><p>弱化断言，暗示「可能还有其他原因」。</p>
<blockquote>
<p>例：<br>忙しい<strong>とか</strong>で断られた（用「很忙之类的理由」拒绝了）——忙（いそが）断（ことわ）</p>
</blockquote>
<h3 id="3-双重否定「～じゃないの」"><a href="#3-双重否定「～じゃないの」" class="headerlink" title="3. 双重否定「～じゃないの」"></a>3. <strong>双重否定「～じゃないの」</strong></h3><p>通过「否定＋否定」加强辩解语气，句尾「の」软化态度。</p>
<blockquote>
<p>例：<br>嫌い<strong>じゃないの</strong>（并不是讨厌啊）——嫌（きら）</p>
</blockquote>
<h2 id="四、学习建议-1"><a href="#四、学习建议-1" class="headerlink" title="四、学习建议"></a>四、学习建议</h2><ol>
<li><strong>重点记忆词汇</strong>：</li>
</ol>
<ul>
<li>必背动词：<strong>思う</strong>（思考&#x2F;认为）</li>
<li>助词辨析：<strong>とか</strong>（模糊化） vs <strong>から</strong>（明确原因）</li>
<li>语气词：<strong>の</strong>（解释&#x2F;反问） vs <strong>よ</strong>（强调）</li>
</ul>
<ol start="2">
<li><strong>句型转换练习</strong>：</li>
</ol>
<ul>
<li>原句：想ってないとかじゃないの → 正式表达：思っていないと言っているわけではないのです</li>
</ul>
<h2 id="五、扩展例句-1"><a href="#五、扩展例句-1" class="headerlink" title="五、扩展例句"></a>五、扩展例句</h2><h3 id="否定辩解型"><a href="#否定辩解型" class="headerlink" title="否定辩解型"></a>否定辩解型</h3><ul>
<li><p><strong>知ってないとかじゃないの</strong>——知（し）<br>（并不是说不知道啊）</p>
</li>
<li><p><strong>好きじゃないとかじゃないの</strong>——好（す）<br>（并不是说不喜欢啊）</p>
</li>
</ul>
<h3 id="对比表达"><a href="#对比表达" class="headerlink" title="对比表达"></a>对比表达</h3><ul>
<li><strong>行けない</strong>（单纯否定） vs <strong>行けてないとかじゃないの</strong>（辩解式否定）——行（い）<br>（去不了 vs 并不是说去不了啊）</li>
</ul>
<hr>
<h1 id="いつも御別ればかり-考える人生も"><a href="#いつも御別ればかり-考える人生も" class="headerlink" title="いつも御別ればかり 考える人生も"></a>いつも御別ればかり 考える人生も</h1><p>i tsu mo o wa ka re ba ka ri ka n ga e ru ji n se i mo<br>对总是考虑着离别的人生</p>
<hr>
<h2 id="一、核心词汇-2"><a href="#一、核心词汇-2" class="headerlink" title="一、核心词汇"></a>一、核心词汇</h2><table>
<thead>
<tr>
<th>日语词汇</th>
<th>假名标注</th>
<th>中文翻译</th>
<th>词性&#x2F;功能</th>
<th>学习重点</th>
</tr>
</thead>
<tbody><tr>
<td>いつも</td>
<td>いつも</td>
<td>总是</td>
<td>副词</td>
<td>表习惯性&#x2F;持续性动作</td>
</tr>
<tr>
<td>御別れ</td>
<td>おわかれ</td>
<td>离别</td>
<td>名词</td>
<td>美化语前缀「御（お）」+「別れ」</td>
</tr>
<tr>
<td>ばかり</td>
<td>ばかり</td>
<td>只&#x2F;光是</td>
<td>限定助词</td>
<td>强调重复性或消极倾向</td>
</tr>
<tr>
<td>考える</td>
<td>かんがえる</td>
<td>思考&#x2F;考虑</td>
<td>动词</td>
<td>持续性思维活动</td>
</tr>
<tr>
<td>人生</td>
<td>じんせい</td>
<td>人生</td>
<td>名词</td>
<td>抽象概念名词</td>
</tr>
<tr>
<td>も</td>
<td>も</td>
<td>（转折性强调）</td>
<td>提示助词</td>
<td>暗示「连…也…」的无奈感</td>
</tr>
</tbody></table>
<hr>
<h2 id="二、核心句型-2"><a href="#二、核心句型-2" class="headerlink" title="二、核心句型"></a>二、核心句型</h2><p><strong>「いつも～ばかり考える人生も」</strong></p>
<ul>
<li><p><strong>结构</strong>：<br>いつも + [名词] + ばかり + 考える + 人生 + も</p>
</li>
<li><p><strong>意义</strong>：<br><strong>“对总是只考虑着…的人生（也…）”</strong>（强调持续性负面状态，隐含自嘲或无奈）</p>
</li>
</ul>
<hr>
<h2 id="三、语法要点-1"><a href="#三、语法要点-1" class="headerlink" title="三、语法要点"></a>三、语法要点</h2><h3 id="1-限定助词「ばかり」"><a href="#1-限定助词「ばかり」" class="headerlink" title="1. 限定助词「ばかり」"></a>1. <strong>限定助词「ばかり」</strong></h3><p>表「反复&#x2F;过度集中于某事物」，多含负面评价。</p>
<blockquote>
<p>例：<br>文句<strong>ばかり</strong>言う（光发牢骚）——文句（もんく）<br>雨<strong>ばかり</strong>降る（一直下雨）</p>
</blockquote>
<h3 id="2-动词名词化结构"><a href="#2-动词名词化结构" class="headerlink" title="2. 动词名词化结构"></a>2. <strong>动词名词化结构</strong></h3><p>「考える人生」中，动词连体形直接修饰名词，表「充满…行为的人生」。</p>
<blockquote>
<p>例：<br>悩む<strong>日々</strong>（烦恼的日子）——悩（なや）日々（ひび）</p>
</blockquote>
<h3 id="3-提示助词「も」的转折性"><a href="#3-提示助词「も」的转折性" class="headerlink" title="3. 提示助词「も」的转折性"></a>3. <strong>提示助词「も」的转折性</strong></h3><p>通过「人生も」暗示「连这种人生也…」，常后续未言明的评价（如「虚しい」）。</p>
<blockquote>
<p>对比：<br>楽しい人生（快乐的人生） vs <strong>考える人生も</strong>（连思考的人生也…）</p>
</blockquote>
<hr>
<h2 id="四、学习建议-2"><a href="#四、学习建议-2" class="headerlink" title="四、学习建议"></a>四、学习建议</h2><ol>
<li><strong>重点记忆词汇</strong>：</li>
</ol>
<ul>
<li>必背名词：<strong>別れ</strong>（离别）、<strong>人生</strong>（人生）</li>
<li>助词对比：<strong>ばかり</strong>（消极限定） vs <strong>だけ</strong>（中性限定）</li>
</ul>
<ol start="2">
<li><strong>句型活用练习</strong>：</li>
</ol>
<ul>
<li>原句：別れ<strong>ばかり</strong>考える → 替换：失敗<strong>ばかり</strong>考える（总想着失败）——失敗（しっぱい）</li>
</ul>
<hr>
<h2 id="五、扩展例句-2"><a href="#五、扩展例句-2" class="headerlink" title="五、扩展例句"></a>五、扩展例句</h2><h3 id="负面持续性表达"><a href="#负面持续性表达" class="headerlink" title="负面持续性表达"></a>负面持续性表达</h3><ul>
<li><p><strong>いつも後悔ばかり考える夜も</strong>——後悔（こうかい）夜（よる）<br>（对总是想着后悔的夜晚也…）</p>
</li>
<li><p><strong>寂しさばかり感じる日々も</strong>——寂（さび）感（かん）<br>（对总是感到寂寞的日子也…）</p>
</li>
</ul>
<h3 id="对比表达-1"><a href="#对比表达-1" class="headerlink" title="对比表达"></a>对比表达</h3><ul>
<li><strong>成功ばかり</strong>追う人生（追逐成功的人生） vs <strong>別ればかり</strong>考える人生<br>——成功（せいこう）追（お）</li>
</ul>
<h1 id="積極的に嬉しいから"><a href="#積極的に嬉しいから" class="headerlink" title="積極的に嬉しいから"></a>積極的に嬉しいから</h1><p>我也是感到积极高兴的</p>
<h1 id="会えばきっと足りなくて"><a href="#会えばきっと足りなくて" class="headerlink" title="会えばきっと足りなくて"></a>会えばきっと足りなくて</h1><p>若只是相见 我一定不会满足</p>
<h1 id="会話の切れ端まで-歌詞で覚えるの"><a href="#会話の切れ端まで-歌詞で覚えるの" class="headerlink" title="会話の切れ端まで 歌詞で覚えるの"></a>会話の切れ端まで 歌詞で覚えるの</h1><p>就连会话的断片 我都会用歌词去记忆</p>
<h1 id="向いてくる"><a href="#向いてくる" class="headerlink" title="向いてくる"></a>向いてくる</h1><p>你面向我了</p>
<h1 id="引っ付く横長の目-鬱陶しいけど"><a href="#引っ付く横長の目-鬱陶しいけど" class="headerlink" title="引っ付く横長の目 鬱陶しいけど"></a>引っ付く横長の目 鬱陶しいけど</h1><p>对那吸引我的炯炯眼神感到烦躁</p>
<h1 id="逃げる準備に疲れたわ"><a href="#逃げる準備に疲れたわ" class="headerlink" title="逃げる準備に疲れたわ"></a>逃げる準備に疲れたわ</h1><p>但我已经懒得躲闪</p>
<h1 id="あなたに幾度も-触れたって"><a href="#あなたに幾度も-触れたって" class="headerlink" title="あなたに幾度も 触れたって"></a>あなたに幾度も 触れたって</h1><p>无论触碰你多少次</p>
<h1 id="大体ちょっとだけ頓知"><a href="#大体ちょっとだけ頓知" class="headerlink" title="大体ちょっとだけ頓知"></a>大体ちょっとだけ頓知</h1><p>大概都会有一丝闪念</p>
<h1 id="空回りの本心-隠せちゃう"><a href="#空回りの本心-隠せちゃう" class="headerlink" title="空回りの本心 隠せちゃう"></a>空回りの本心 隠せちゃう</h1><p>使得我藏匿这爱胡思乱想的内心</p>
<h1 id="あたしのこと知らないで-因果応報叱らないで"><a href="#あたしのこと知らないで-因果応報叱らないで" class="headerlink" title="あたしのこと知らないで 因果応報叱らないで"></a>あたしのこと知らないで 因果応報叱らないで</h1><p>不要去了解我 也不要用因果报应咒骂我</p>
<h1 id="あたしのこと知らないで-因果応報叱らないで-1"><a href="#あたしのこと知らないで-因果応報叱らないで-1" class="headerlink" title="あたしのこと知らないで 因果応報叱らないで"></a>あたしのこと知らないで 因果応報叱らないで</h1><p>不要去了解我 也不要用因果报应咒骂我</p>
<h1 id="あたしのこと知らないで-因果応報叱らないで-2"><a href="#あたしのこと知らないで-因果応報叱らないで-2" class="headerlink" title="あたしのこと知らないで 因果応報叱らないで"></a>あたしのこと知らないで 因果応報叱らないで</h1><p>不要去了解我 也不要用因果报应咒骂我</p>
<h1 id="あたしのこと嫌わないで"><a href="#あたしのこと嫌わないで" class="headerlink" title="あたしのこと嫌わないで"></a>あたしのこと嫌わないで</h1><p>不要讨厌我啊</p>
<h1 id="もっと-仕草に揺れて-抑えきれないほどに"><a href="#もっと-仕草に揺れて-抑えきれないほどに" class="headerlink" title="もっと 仕草に揺れて 抑えきれないほどに"></a>もっと 仕草に揺れて 抑えきれないほどに</h1><p>就像快要无法控制一般 我的举止开始动摇</p>
<h1 id="リズムがなきゃ話も味っけない"><a href="#リズムがなきゃ話も味っけない" class="headerlink" title="リズムがなきゃ話も味っけない"></a>リズムがなきゃ話も味っけない</h1><p>要是不来点节奏 这对话也显得乏味</p>
<h1 id="ミラーボール怖がって-アコギ持ち替えたら"><a href="#ミラーボール怖がって-アコギ持ち替えたら" class="headerlink" title="ミラーボール怖がって アコギ持ち替えたら"></a>ミラーボール怖がって アコギ持ち替えたら</h1><p>我害怕灯球 但若给我换上一把木吉他</p>
<h1 id="まだ-恥ずかしく踊れるから"><a href="#まだ-恥ずかしく踊れるから" class="headerlink" title="まだ 恥ずかしく踊れるから"></a>まだ 恥ずかしく踊れるから</h1><p>我就能羞涩地继续这段舞蹈</p>
<h1 id="ずっと-浅はかです-帰りたくないけれど"><a href="#ずっと-浅はかです-帰りたくないけれど" class="headerlink" title="ずっと 浅はかです 帰りたくないけれど"></a>ずっと 浅はかです 帰りたくないけれど</h1><p>一直都是肤浅的样子 我不想回到过去</p>
<h1 id="言わないで-もう身体に慣れない"><a href="#言わないで-もう身体に慣れない" class="headerlink" title="言わないで もう身体に慣れない"></a>言わないで もう身体に慣れない</h1><p>所以别说了 身体已经感到别扭</p>
<h1 id="変わってゆくから-私ねもっと"><a href="#変わってゆくから-私ねもっと" class="headerlink" title="変わってゆくから 私ねもっと"></a>変わってゆくから 私ねもっと</h1><p>会改变的 我啊 会更努力的</p>
<h1 id="ねぇ、見届けて-欲しがりでも"><a href="#ねぇ、見届けて-欲しがりでも" class="headerlink" title="ねぇ、見届けて 欲しがりでも"></a>ねぇ、見届けて 欲しがりでも</h1><p>呐，亲眼见证我 哪怕这只是我的欲求</p>
<h1 id="どう思っているとか"><a href="#どう思っているとか" class="headerlink" title="どう思っているとか"></a>どう思っているとか</h1><p>关于我的各种想法</p>
<h1 id="伝えるのが-恥ずかしいんじゃなくて"><a href="#伝えるのが-恥ずかしいんじゃなくて" class="headerlink" title="伝えるのが 恥ずかしいんじゃなくて"></a>伝えるのが 恥ずかしいんじゃなくて</h1><p>并不是不好意思袒露</p>
<h1 id="ハッピーな永遠歌〜"><a href="#ハッピーな永遠歌〜" class="headerlink" title="ハッピーな永遠歌〜"></a>ハッピーな永遠歌〜</h1><p>而是这代表永恒的快乐歌谣</p>
<h1 id="告げそうになるから-控えさせてね-それだけ"><a href="#告げそうになるから-控えさせてね-それだけ" class="headerlink" title="告げそうになるから 控えさせてね それだけ"></a>告げそうになるから 控えさせてね それだけ</h1><p>我马上就能向你传达了 所以请你再等等噢 仅此而已</p>
<h1 id="またすぐ否定的になってしまうけど"><a href="#またすぐ否定的になってしまうけど" class="headerlink" title="またすぐ否定的になってしまうけど"></a>またすぐ否定的になってしまうけど</h1><p>虽然马上又会再否定自己</p>
<h1 id="もしこの世の歌を-書き終えても"><a href="#もしこの世の歌を-書き終えても" class="headerlink" title="もしこの世の歌を 書き終えても"></a>もしこの世の歌を 書き終えても</h1><p>若是把这个世界的歌都写到枯竭</p>
<h1 id="あなたに振り向いて欲しい-最後の歌〜"><a href="#あなたに振り向いて欲しい-最後の歌〜" class="headerlink" title="あなたに振り向いて欲しい 最後の歌〜"></a>あなたに振り向いて欲しい 最後の歌〜</h1><p>我还是会留下一首希望能使你回眸的最终曲</p>
<h1 id="誰かのまつげと-草臥れたリスケ"><a href="#誰かのまつげと-草臥れたリスケ" class="headerlink" title="誰かのまつげと 草臥れたリスケ"></a>誰かのまつげと 草臥れたリスケ</h1><p>是谁的睫毛 与这令人厌烦的日程表</p>
<h1 id="夜は長くて-酔うのに必死ね"><a href="#夜は長くて-酔うのに必死ね" class="headerlink" title="夜は長くて 酔うのに必死ね"></a>夜は長くて 酔うのに必死ね</h1><p>夜还很长 拼了命只是为了将自己灌醉</p>
<h1 id="もっと-仕草に揺れて-抑えきれないほどに-1"><a href="#もっと-仕草に揺れて-抑えきれないほどに-1" class="headerlink" title="もっと 仕草に揺れて 抑えきれないほどに"></a>もっと 仕草に揺れて 抑えきれないほどに</h1><p>就像快要无法控制一般 我的身体开始律动</p>
<h1 id="リズムがなきゃ話も味っけない-1"><a href="#リズムがなきゃ話も味っけない-1" class="headerlink" title="リズムがなきゃ話も味っけない"></a>リズムがなきゃ話も味っけない</h1><p>要是没有了节拍 这对话也会显得乏味</p>
<h1 id="ミラーボール怖がって-アコギ持ち替えたら-1"><a href="#ミラーボール怖がって-アコギ持ち替えたら-1" class="headerlink" title="ミラーボール怖がって アコギ持ち替えたら"></a>ミラーボール怖がって アコギ持ち替えたら</h1><p>我害怕灯球 但若给我换上一把木吉他</p>
<h1 id="ねぇ、見届けて-欲しがりでも-1"><a href="#ねぇ、見届けて-欲しがりでも-1" class="headerlink" title="ねぇ、見届けて 欲しがりでも"></a>ねぇ、見届けて 欲しがりでも</h1><p>呐，亲眼见证这一切 哪怕这只是我的欲求</p>
<h1 id="あたしのこと知らないで-因果応報叱らないで-3"><a href="#あたしのこと知らないで-因果応報叱らないで-3" class="headerlink" title="あたしのこと知らないで 因果応報叱らないで"></a>あたしのこと知らないで 因果応報叱らないで</h1><p>不要去了解我 也不要用因果报应咒骂我</p>
<h1 id="あたしのこと知らないで-因果応報叱らないで-4"><a href="#あたしのこと知らないで-因果応報叱らないで-4" class="headerlink" title="あたしのこと知らないで 因果応報叱らないで"></a>あたしのこと知らないで 因果応報叱らないで</h1><p>不要去了解我 也不要用因果报应咒骂我</p>
<h1 id="あたしのこと識らないで-因果応報叱らないで"><a href="#あたしのこと識らないで-因果応報叱らないで" class="headerlink" title="あたしのこと識らないで 因果応報叱らないで"></a>あたしのこと識らないで 因果応報叱らないで</h1><p>不要去了解我 也不要用因果报应咒骂我</p>
<h1 id="私のこと嫌わないで"><a href="#私のこと嫌わないで" class="headerlink" title="私のこと嫌わないで"></a>私のこと嫌わないで</h1><p>不要讨厌我啊</p>
<h1 id="もっと-仕草に揺れて-抑えきれないほどに-2"><a href="#もっと-仕草に揺れて-抑えきれないほどに-2" class="headerlink" title="もっと 仕草に揺れて 抑えきれないほどに"></a>もっと 仕草に揺れて 抑えきれないほどに</h1><p>就像快要无法控制一般 我的动作更加摇摆</p>
<h1 id="リズムが泣きゃ-話も味っけない"><a href="#リズムが泣きゃ-話も味っけない" class="headerlink" title="リズムが泣きゃ 話も味っけない"></a>リズムが泣きゃ 話も味っけない</h1><p>若是旋律变得悲伤 这对话也会显得乏味</p>
<h1 id="ミラーボール怖がって-アコギ持ち替えたら-2"><a href="#ミラーボール怖がって-アコギ持ち替えたら-2" class="headerlink" title="ミラーボール怖がって アコギ持ち替えたら"></a>ミラーボール怖がって アコギ持ち替えたら</h1><p>我害怕灯球 但若能将木吉他换个握法</p>
<h1 id="まだ-恥ずかしく踊れるから-1"><a href="#まだ-恥ずかしく踊れるから-1" class="headerlink" title="まだ 恥ずかしく踊れるから"></a>まだ 恥ずかしく踊れるから</h1><p>我依然能羞涩地继续这段舞蹈</p>
<h1 id="ずっと-浅はかです-帰りたくないけれど-1"><a href="#ずっと-浅はかです-帰りたくないけれど-1" class="headerlink" title="ずっと 浅はかです 帰りたくないけれど"></a>ずっと 浅はかです 帰りたくないけれど</h1><p>一直都是肤浅的样子 我不想回到过去</p>
<h1 id="言わないで-もう身体に鳴れない"><a href="#言わないで-もう身体に鳴れない" class="headerlink" title="言わないで もう身体に鳴れない"></a>言わないで もう身体に鳴れない</h1><p>所以别说了 这些声音已经无法在我的内心回响</p>
<h1 id="変わってゆくから-私ねもっと-1"><a href="#変わってゆくから-私ねもっと-1" class="headerlink" title="変わってゆくから 私ねもっと"></a>変わってゆくから 私ねもっと</h1><p>会改变的 我啊 会更努力的</p>
<h1 id="寝ぇ-見届けて-欲しがりでも-zz"><a href="#寝ぇ-見届けて-欲しがりでも-zz" class="headerlink" title="寝ぇ 見届けて 欲しがりでも zz"></a>寝ぇ 見届けて 欲しがりでも zz</h1><p>睡吧 然后见证我的未来 哪怕这只是我的欲求 zz</p>
]]></content>
      <categories>
        <category>日语歌词翻译学习</category>
      </categories>
      <tags>
        <tag>MILABO</tag>
        <tag>ZTMY</tag>
        <tag>日语</tag>
        <tag>歌词翻译</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL进阶</title>
    <url>/2025/03/10/MySQL%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>数据库学习</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
        <tag>MySQL进阶</tag>
      </tags>
  </entry>
  <entry>
    <title>日语动词学习</title>
    <url>/2025/03/09/%E6%97%A5%E8%AF%AD%E5%8A%A8%E8%AF%8D%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="日语动词分类与变形规则详解"><a href="#日语动词分类与变形规则详解" class="headerlink" title="日语动词分类与变形规则详解"></a>日语动词分类与变形规则详解</h1><hr>
<h2 id="一、动词分类（3大类）"><a href="#一、动词分类（3大类）" class="headerlink" title="一、动词分类（3大类）"></a>一、动词分类（3大类）</h2><h3 id="1-一类动词（五段动词）"><a href="#1-一类动词（五段动词）" class="headerlink" title="1. 一类动词（五段动词）"></a>1. <strong>一类动词（五段动词）</strong></h3><ul>
<li><strong>特征</strong>：<ul>
<li>不以「る」结尾；</li>
<li>以「る」结尾时，倒数第二个假名在「あ&#x2F;う&#x2F;お」段。</li>
</ul>
</li>
<li><strong>示例</strong>：<ul>
<li><strong>行（い）く</strong>（去）</li>
<li><strong>話（はな）す</strong>（说）</li>
<li><strong>飲（の）む</strong>（喝）</li>
</ul>
</li>
</ul>
<h3 id="2-二类动词（一段动词）"><a href="#2-二类动词（一段动词）" class="headerlink" title="2. 二类动词（一段动词）"></a>2. <strong>二类动词（一段动词）</strong></h3><ul>
<li><strong>特征</strong>：<ul>
<li>以「る」结尾，倒数第二个假名在「い&#x2F;え」段。</li>
</ul>
</li>
<li><strong>示例</strong>：<ul>
<li><strong>食（た）べる</strong>（吃）</li>
<li><strong>見（み）る</strong>（看）</li>
<li><strong>寝（ね）る</strong>（睡觉）</li>
</ul>
</li>
</ul>
<h3 id="3-三类动词（不规则动词）"><a href="#3-三类动词（不规则动词）" class="headerlink" title="3. 三类动词（不规则动词）"></a>3. <strong>三类动词（不规则动词）</strong></h3><ul>
<li><strong>特征</strong>：<ul>
<li>仅两个动词：<strong>する</strong>（做）、<strong>来（く）る</strong>（来）。</li>
</ul>
</li>
<li><strong>示例</strong>：<ul>
<li><strong>勉強（べんきょう）する</strong>（学习）</li>
<li><strong>旅行（りょこう）する</strong>（旅行）</li>
</ul>
</li>
</ul>
<hr>
<h2 id="二、基础变形规则（附示例）"><a href="#二、基础变形规则（附示例）" class="headerlink" title="二、基础变形规则（附示例）"></a>二、基础变形规则（附示例）</h2><h3 id="1-ます形（礼貌形）"><a href="#1-ます形（礼貌形）" class="headerlink" title="1. ます形（礼貌形）"></a>1. <strong>ます形（礼貌形）</strong></h3><table>
<thead>
<tr>
<th>类别</th>
<th>规则</th>
<th>示例（原形 → ます形）</th>
</tr>
</thead>
<tbody><tr>
<td>一类动词</td>
<td>词尾变「い段」+ ます</td>
<td>行く → 行（い）きます</td>
</tr>
<tr>
<td>二类动词</td>
<td>去「る」+ ます</td>
<td>食べる → 食（た）べます</td>
</tr>
<tr>
<td>三类动词</td>
<td>する→ します &#x2F; 来る→ 来（き）ます</td>
<td>勉強する → 勉強します</td>
</tr>
</tbody></table>
<h3 id="2-ない形（否定形）"><a href="#2-ない形（否定形）" class="headerlink" title="2. ない形（否定形）"></a>2. <strong>ない形（否定形）</strong></h3><table>
<thead>
<tr>
<th>类别</th>
<th>规则</th>
<th>示例（原形 → ない形）</th>
</tr>
</thead>
<tbody><tr>
<td>一类动词</td>
<td>词尾变「あ段」+ ない</td>
<td>話す → 話（はな）さない</td>
</tr>
<tr>
<td>二类动词</td>
<td>去「る」+ ない</td>
<td>見る → 見（み）ない</td>
</tr>
<tr>
<td>三类动词</td>
<td>する→ しない &#x2F; 来る→ 来（こ）ない</td>
<td>来る → 来（こ）ない</td>
</tr>
</tbody></table>
<h3 id="3-可能形（“能-可以”）"><a href="#3-可能形（“能-可以”）" class="headerlink" title="3. 可能形（“能&#x2F;可以”）"></a>3. <strong>可能形（“能&#x2F;可以”）</strong></h3><table>
<thead>
<tr>
<th>类别</th>
<th>规则</th>
<th>示例（原形 → 可能形）</th>
</tr>
</thead>
<tbody><tr>
<td>一类动词</td>
<td>词尾变「え段」+ る</td>
<td>書（か）く → 書（か）ける</td>
</tr>
<tr>
<td>二类动词</td>
<td>去「る」+ られる</td>
<td>食べる → 食（た）べられる</td>
</tr>
<tr>
<td>三类动词</td>
<td>する→ できる &#x2F; 来る→ 来（こ）られる</td>
<td>勉強する → 勉強できる</td>
</tr>
</tbody></table>
<h3 id="4-命令形（强制语气）"><a href="#4-命令形（强制语气）" class="headerlink" title="4. 命令形（强制语气）"></a>4. <strong>命令形（强制语气）</strong></h3><table>
<thead>
<tr>
<th>类别</th>
<th>规则</th>
<th>示例（原形 → 命令形）</th>
</tr>
</thead>
<tbody><tr>
<td>一类动词</td>
<td>词尾变「え段」</td>
<td>行く → 行（い）け！</td>
</tr>
<tr>
<td>二类动词</td>
<td>去「る」+ ろ&#x2F;よ</td>
<td>食べる → 食（た）べろ！</td>
</tr>
<tr>
<td>三类动词</td>
<td>する→ しろ &#x2F; 来る→ 来（こ）い</td>
<td>来る → 来（こ）い！</td>
</tr>
</tbody></table>
<h3 id="5-意志形（“打算-想要”）"><a href="#5-意志形（“打算-想要”）" class="headerlink" title="5. 意志形（“打算&#x2F;想要”）"></a>5. <strong>意志形（“打算&#x2F;想要”）</strong></h3><table>
<thead>
<tr>
<th>类别</th>
<th>规则</th>
<th>示例（原形 → 意志形）</th>
</tr>
</thead>
<tbody><tr>
<td>一类动词</td>
<td>词尾变「お段」+ う</td>
<td>行く → 行（い）こう</td>
</tr>
<tr>
<td>二类动词</td>
<td>去「る」+ よう</td>
<td>食べる → 食（た）べよう</td>
</tr>
<tr>
<td>三类动词</td>
<td>する→ しよう &#x2F; 来る→ 来（こ）よう</td>
<td>勉強する → 勉強しよう</td>
</tr>
</tbody></table>
<h3 id="6-假定形（“如果…”）"><a href="#6-假定形（“如果…”）" class="headerlink" title="6. 假定形（“如果…”）"></a>6. <strong>假定形（“如果…”）</strong></h3><table>
<thead>
<tr>
<th>类别</th>
<th>规则</th>
<th>示例（原形 → 假定形）</th>
</tr>
</thead>
<tbody><tr>
<td>一类动词</td>
<td>词尾变「え段」+ ば</td>
<td>行く → 行（い）けば</td>
</tr>
<tr>
<td>二类动词</td>
<td>去「る」+ れば</td>
<td>食べる → 食（た）べれば</td>
</tr>
<tr>
<td>三类动词</td>
<td>する→ すれば &#x2F; 来る→ 来（く）れば</td>
<td>来る → 来（く）れば</td>
</tr>
</tbody></table>
<hr>
<h2 id="三、综合示例"><a href="#三、综合示例" class="headerlink" title="三、综合示例"></a>三、综合示例</h2><h3 id="1-ます形-否定形"><a href="#1-ます形-否定形" class="headerlink" title="1. ます形 + 否定形"></a>1. <strong>ます形 + 否定形</strong></h3><ul>
<li><strong>寒（さむ）いから窓（まど）を閉（し）める</strong>（因为冷，所以关窗）<br>→ 寒いから窓を閉めます &#x2F; 閉めません。</li>
</ul>
<h3 id="2-可能形-命令形"><a href="#2-可能形-命令形" class="headerlink" title="2. 可能形 + 命令形"></a>2. <strong>可能形 + 命令形</strong></h3><ul>
<li><strong>書（か）ける！早（はや）く書（か）け！</strong>（能写！快点写！）</li>
</ul>
<h3 id="3-假定形-意志形"><a href="#3-假定形-意志形" class="headerlink" title="3. 假定形 + 意志形"></a>3. <strong>假定形 + 意志形</strong></h3><ul>
<li><strong>行（い）けば、楽（たの）しくなるよ</strong>（如果去的话，会变开心的）。</li>
</ul>
<hr>
<h2 id="四、学习建议"><a href="#四、学习建议" class="headerlink" title="四、学习建议"></a>四、学习建议</h2><ol>
<li><strong>分类记忆法</strong>：先判断动词类别（看词尾），再套用规则变形。</li>
<li><strong>高频动词练习</strong>：如「する」「来る」「食べる」。</li>
<li><strong>活用表格整理</strong>：自制表格对比不同变形形式（例：行く→行きます&#x2F;行かない&#x2F;行ける）。</li>
</ol>
]]></content>
      <categories>
        <category>日语学习</category>
      </categories>
      <tags>
        <tag>日语</tag>
        <tag>语言学习</tag>
        <tag>语法</tag>
        <tag>动词</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基础</title>
    <url>/2025/03/08/MySQL%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><h2 id="SQL通用语法"><a href="#SQL通用语法" class="headerlink" title="SQL通用语法"></a>SQL通用语法</h2><ol>
<li>SQL语句可以单行或多行书写，以<strong>分号结尾</strong>。</li>
<li>SQL语句可以使用空格&#x2F;缩进来增强语句的可读性。</li>
<li>MySQL数据库的SQL语句不区分大小写，<strong>关键字</strong>建议使用大写。</li>
<li>注释：<ul>
<li>单行注释：–注释内容 或 #注释内容(MySQL特有)</li>
<li>多行注释：&#x2F;*注释内容*&#x2F;</li>
</ul>
</li>
</ol>
<h2 id="DDL-数据定义语言"><a href="#DDL-数据定义语言" class="headerlink" title="DDL(数据定义语言)"></a>DDL(数据定义语言)</h2><ol>
<li>数据库操作：</li>
</ol>
<ul>
<li><strong>SHOW DATABASES;</strong></li>
<li><strong>CREAT DATABASE</strong> 数据库名;</li>
<li><strong>USE</strong> 数据库名;</li>
<li><strong>SELECT DATABASE();</strong></li>
<li><strong>DROP DATABASE</strong> 数据库名;</li>
</ul>
<ol start="2">
<li>表操作：</li>
</ol>
<ul>
<li><strong>SHOW TABLES;</strong></li>
<li><strong>CREATE TABLE</strong> 表名 (字段1 数据类型,字段2 数据类型,…);</li>
<li><strong>DESC</strong> 表名;</li>
<li><strong>SHOW CREATE TABLE</strong> 表名;</li>
<li><strong>ALTER TABLE</strong> 表名 <strong>ADD</strong> 字段 数据类型;</li>
<li><strong>DROP TABLE</strong> 表名;</li>
</ul>
<h2 id="DML-数据操作语言"><a href="#DML-数据操作语言" class="headerlink" title="DML(数据操作语言)"></a>DML(数据操作语言)</h2><ul>
<li>添加数据：<strong>INSERT INTO</strong> 表名 (字段1,字段2,…) <strong>VALUES</strong> (值1,值2,…),(值1,值2,…);</li>
</ul>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO students (student_id, name, age)</span><br><span class="line">VALUES</span><br><span class="line">   (1001, &#x27;张三&#x27;, 20),</span><br><span class="line">   (1002, &#x27;李四&#x27;, 22);</span><br></pre></td></tr></table></figure>

<ul>
<li>修改数据：<strong>UPDATE</strong> 表名 <strong>SET</strong> 字段1&#x3D;值1,字段2&#x3D;值2,… <strong>WHERE</strong> 条件;</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE students </span><br><span class="line">SET name = &#x27;李四&#x27;, age = 22 </span><br><span class="line">WHERE student_id = 1001;</span><br></pre></td></tr></table></figure>

<ul>
<li>删除数据：<strong>DELETE FROM</strong> 表名 <strong>WHERE</strong> 条件;</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM students </span><br><span class="line">WHERE student_id &gt;= 1005;</span><br></pre></td></tr></table></figure>
<h2 id="DQL-数据查询语言"><a href="#DQL-数据查询语言" class="headerlink" title="DQL(数据查询语言)"></a>DQL(数据查询语言)</h2><p><strong>SELECT</strong><br>&emsp;   字段列表 &emsp; -&gt; &emsp; 字段名 [<strong>AS</strong>] 别名<br><strong>FROM</strong><br>&emsp;  表名<br><strong>WHERE</strong><br>&emsp;  条件(分组前过滤) &emsp; -&gt; &emsp; 比较符号, 逻辑符号, like, between and, in,<br><strong>GROUP BY</strong><br>&emsp;  分组字段列表<br><strong>HAVING</strong><br>&emsp;  分组后条件列表(分组后过滤)<br><strong>ORDER BY</strong><br>&emsp;  排序列表 &emsp; -&gt; &emsp; 升序 ASC; 降序 DESC<br><strong>LIMIT</strong><br>&emsp;  分页条件(起始索引; 获取条数)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    customer_id AS 客户ID,</span><br><span class="line">    product_category AS 产品类别,</span><br><span class="line">    SUM(amount) AS total_amount  -- 计算每组的总金额，并为结果列起别名</span><br><span class="line">FROM</span><br><span class="line">    orders</span><br><span class="line">WHERE</span><br><span class="line">    order_date &gt; &#x27;2024-01-01&#x27;    -- 分组前过滤：仅筛选2024年后的订单</span><br><span class="line">GROUP BY</span><br><span class="line">    customer_id, product_category  -- 按客户和产品类别分组</span><br><span class="line">HAVING</span><br><span class="line">    total_amount &gt; 5000           -- 分组后过滤：仅保留总金额超过5000的分组</span><br><span class="line">ORDER BY</span><br><span class="line">    total_amount DESC             -- 按总金额降序排序</span><br><span class="line">LIMIT</span><br><span class="line">    5 OFFSET 0;                  -- 分页：返回前5条记录</span><br></pre></td></tr></table></figure>

<h2 id="DCL-数据控制语言"><a href="#DCL-数据控制语言" class="headerlink" title="DCL(数据控制语言)"></a>DCL(数据控制语言)</h2><ol>
<li>用户管理：</li>
</ol>
<ul>
<li><strong>CREATE USER</strong> ‘用户名‘<strong>@</strong>‘主机名’ <strong>IDENTIFIED BY</strong> ‘密码’;</li>
<li><strong>ALTER USER</strong> ‘用户名‘<strong>@</strong>‘主机名’ <strong>IDENTIFIED WITH mysql_native_password BY</strong> ‘新密码’;</li>
<li><strong>DROP USER</strong> ‘用户名‘<strong>@</strong>‘主机名’;</li>
</ul>
<ol start="2">
<li>权限控制：</li>
</ol>
<ul>
<li><strong>SHOW GRANTS FOR</strong> ‘用户名‘<strong>@</strong>‘主机名’;</li>
<li><strong>GRANT</strong> 权限列表 <strong>ON</strong> 数据库名.表名 <strong>TO</strong> ‘用户名‘<strong>@</strong>‘主机名’;</li>
<li><strong>REVOKE</strong> 权限列表 <strong>ON</strong> 数据库名.表名 <strong>FROM</strong> ‘用户名‘<strong>@</strong>‘主机名’;</li>
</ul>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><ul>
<li><strong>CONCAT</strong>: 连接字符串<blockquote>
<p>CONCAT(‘a’,’b’,’c’) &#x3D;&#x3D; ‘abc’</p>
</blockquote>
</li>
<li><strong>LOWER, UPPER</strong>: 大小写转换<blockquote>
<p>LOWER(‘ABC’) &#x3D;&#x3D; ‘abc’</p>
</blockquote>
</li>
<li><strong>LPAD, RPAD</strong>: 左&#x2F;右填充字符串<blockquote>
<p>LPAD(‘abc’,5,’*’) &#x3D;&#x3D; ‘**abc’</p>
</blockquote>
</li>
<li><strong>TRIM</strong>: 去除字符串首尾空格<blockquote>
<p>TRIM(‘ abc ‘) &#x3D;&#x3D; ‘abc’</p>
</blockquote>
</li>
<li><strong>SUBSTRING</strong>: 截取字符串<blockquote>
<p>SUBSTRING(‘Hello MySQL’,1,5) &#x3D;&#x3D; ‘Hello’</p>
</blockquote>
</li>
</ul>
<h2 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h2><ul>
<li><strong>CEIL</strong>: 向上取整<blockquote>
<p>CEIL(3.14) &#x3D;&#x3D; 4</p>
</blockquote>
</li>
<li><strong>FLOOR</strong>: 向下取整<blockquote>
<p>FLOOR(3.14) &#x3D;&#x3D; 3</p>
</blockquote>
</li>
<li><strong>ROUND</strong>: 四舍五入<blockquote>
<p>ROUND(3.14) &#x3D;&#x3D; 3</p>
</blockquote>
</li>
<li><strong>MOD</strong>: 取余数<blockquote>
<p>MOD(5,2) &#x3D;&#x3D; 1</p>
</blockquote>
</li>
<li><strong>RAND</strong>: 随机数<blockquote>
<p>RAND()</p>
</blockquote>
</li>
</ul>
<h2 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h2><ul>
<li><strong>CURDATE</strong>: 当前日期</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT CURDATE(); -- 输出：2025-03-10  </span><br><span class="line">INSERT INTO orders (product, order_date) VALUES (&#x27;Laptop&#x27;, CURDATE()); -- 插入当前日期</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>CURTIME</strong>: 当前时间</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT CURTIME(); -- 输出：14:30:45  </span><br><span class="line">UPDATE logs SET login_time = CURTIME() WHERE user_id = 1001; -- 记录登录时间</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>NOW</strong>: 当前日期和时间</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT NOW(); -- 输出：2025-03-10 14:30:45  </span><br><span class="line">CREATE TABLE events (  </span><br><span class="line">    event_id INT,  </span><br><span class="line">    event_time DATETIME DEFAULT NOW()  -- 默认插入当前时间戳</span><br><span class="line">);  </span><br></pre></td></tr></table></figure>
<ul>
<li><strong>YEAR</strong>: 获取年份</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT YEAR(&#x27;2025-03-10&#x27;); -- 输出：2025  </span><br><span class="line">SELECT YEAR(order_date) AS order_year, COUNT(*) FROM orders GROUP BY order_year; -- 按年份统计订单</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>MONTH</strong>: 获取月份</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT MONTH(&#x27;2025-03-10&#x27;); -- 输出：3  </span><br><span class="line">SELECT MONTH(sale_date) AS month, SUM(revenue) FROM sales GROUP BY month; -- 按月统计收入</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>DAY</strong>: 获取日期</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT DAY(&#x27;2025-03-10&#x27;); -- 输出：10  </span><br><span class="line">SELECT DAY(login_date) AS day, COUNT(user_id) FROM logins GROUP BY day; -- 分析每日活跃用户</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>DATE_ADD, DATE_SUB</strong>: 日期加减</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 加7天  </span><br><span class="line">SELECT DATE_ADD(&#x27;2025-03-10&#x27;, INTERVAL 7 DAY); -- 输出：2025-03-17  </span><br><span class="line">-- 减3个月  </span><br><span class="line">SELECT DATE_SUB(&#x27;2025-03-10&#x27;, INTERVAL 3 MONTH); -- 输出：2024-12-10  </span><br><span class="line">-- 计算会员到期时间  </span><br><span class="line">SELECT user_id, DATE_ADD(subscribe_date, INTERVAL 1 YEAR) AS expire_date FROM subscriptions</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>DATEDIFF</strong>: 日期差</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT DATEDIFF(&#x27;2025-03-10&#x27;, &#x27;2025-02-01&#x27;); -- 输出：37  </span><br><span class="line">-- 分析项目周期  </span><br><span class="line">SELECT project_id, DATEDIFF(end_date, start_date) AS duration FROM projects</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>DATE_FORMAT</strong>: 日期格式化</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 格式化为 &quot;年-月-日 时:分:秒&quot;  </span><br><span class="line">SELECT DATE_FORMAT(NOW(), &#x27;%Y-%m-%d %H:%i:%s&#x27;); -- 输出：2025-03-10 14:30:45  </span><br><span class="line">-- 生成中文格式日期  </span><br><span class="line">SELECT DATE_FORMAT(NOW(), &#x27;%Y年%m月%d日 %H时&#x27;) AS formatted_date; -- 输出：2025年03月10日 14时</span><br></pre></td></tr></table></figure>

<h2 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h2><ul>
<li><strong>IF</strong>: 条件判断, 例: IF(条件,真值,假值)</li>
<li><strong>IFNULL</strong>: 判断是否为NULL, 例: IFNULL(字段,’默认值’)</li>
<li><strong>CASE […] WHEN… THEN… ELSE… END</strong>: 多条件判断, 例: CASE WHEN 条件1 THEN 真值1 WHEN 条件2 THEN 真值2 ELSE 假值 END</li>
</ul>
<h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><ul>
<li><strong>NOT NULL</strong>: 非空约束, 例: 字段名 INT NOT NULL</li>
<li><strong>UNIQUE</strong>: 唯一约束, 例: 字段名 INT UNIQUE</li>
<li><strong>PRIMARY KEY</strong>: 主键约束, 例: 字段名 INT PRIMARY KEY</li>
<li><strong>FOREIGN KEY</strong>: 外键约束, 建立两个表的连接, 确保数据的一致性和完整性, 例: 字段名 INT FOREIGN KEY REFERENCES 表名(字段名)</li>
<li><strong>CHECK</strong>: 检查约束, 例: 字段名 INT CHECK(字段名 &gt; 0)</li>
<li><strong>DEFAULT</strong>: 默认值约束, 例: 字段名 INT DEFAULT 0</li>
</ul>
<h1 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h1><ol>
<li>多表关系：<ul>
<li>一对多：在多的一方设置外键，关联一的一方的主键</li>
<li>多对多：建立中间表，中间表包含两个外键，关联两张表的主键</li>
<li>一对一：用于表结构拆分，在其中任何一方设置外键(UNIQUE)，关联另一方的主键</li>
</ul>
</li>
<li>多表查询：<ul>
<li>内连接：<ul>
<li>隐式：SELECT * FROM 表1,表2 WHERE 表1.字段 &#x3D; 表2.字段;</li>
<li>显示：SELECT * FROM 表1 INNER JOIN 表2 ON 表1.字段 &#x3D; 表2.字段;</li>
</ul>
</li>
<li>外连接：<ul>
<li>左外：SELECT * FROM 表1 LEFT OUTER JOIN 表2 ON 表1.字段 &#x3D; 表2.字段;</li>
<li>右外：SELECT * FROM 表1 RIGHT OUTER JOIN 表2 ON 表1.字段 &#x3D; 表2.字段;</li>
</ul>
</li>
<li>自连接：SELECT * FROM 表1 t1,表1 t2 WHERE t1.字段 &#x3D; t2.字段;</li>
<li>子查询：SELECT * FROM 表1 WHERE 字段 IN (SELECT 字段 FROM 表2);</li>
</ul>
</li>
</ol>
<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><ol>
<li>事务简介：<ul>
<li>事务是一组操作的集合，这组操作，要么全部执行成功，要么全部执行失败</li>
</ul>
</li>
<li>事务操作：<ul>
<li>开启事务：SET AUTOCOMMIT &#x3D; 0;</li>
<li>提交事务：COMMIT;</li>
<li>回滚事务：ROLLBACK;</li>
</ul>
</li>
<li>事务的四大特性:<ul>
<li>原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）</li>
</ul>
</li>
<li>并发事务问题：<ul>
<li>脏读：一个事务读取了另一个事务未提交的数据</li>
<li>不可重复读：一个事务读取了另一个事务修改的数据</li>
<li>幻读：一个事务新增了数据，另一个事务读取了新增的数据</li>
</ul>
</li>
<li>隔离级别：<ul>
<li>READ UNCOMMITTED：读未提交，允许脏读、不可重复读、幻读</li>
<li>READ COMMITTED：读已提交，允许脏读、不可重复读，允许幻读</li>
<li>REPEATABLE READ：可重复读，不允许脏读、不可重复读，允许幻读</li>
<li>SERIALIZABLE：串行化，不允许脏读、不可重复读、幻读</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>数据库学习</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
        <tag>MySQL基础</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL面试题</title>
    <url>/2025/03/06/MySQL%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<p>(总结于<a href="https://xiaolincoding.com/interview/mysql.html">小林coding</a>，缩减了部分内容，仅供学习参考，正在更新中)</p>
<h1 id="SQL基础"><a href="#SQL基础" class="headerlink" title="SQL基础"></a>SQL基础</h1><h2 id="NOSQL和SQL的区别"><a href="#NOSQL和SQL的区别" class="headerlink" title="NOSQL和SQL的区别"></a>NOSQL和SQL的区别</h2><p><strong>SQL</strong>数据库，指关系型数据库，主要代表：SQL Server、Oracle、MySQL(开源)、PostgreSQL(开源)</p>
<p>关系型数据库存储结构化数据，这些数据逻辑上以行列二维表格的形式存在，每一列代表数据的一个属性，每一行代表一个数据实体</p>
<p><strong>NoSQL</strong>指非关系型数据库，主要代表：MongoDB、Redis</p>
<p>NoSQL数据库逻辑上提供了不同于二维表的存储方式，存储方式可以使JSON文档、哈希表或者其他</p>
<p>选择SQL还是NoSQL,考虑一下因素：</p>
<p><strong>ACID vs BASE</strong></p>
<p>关系型数据库支持ACID，即<strong>原子性、一致性、隔离性、持久性</strong>；相对而言，NoSQL采用更加宽松的模型BASE，即<strong>基本可用、软状态、最终一致性</strong></p>
<p>从实用的角度出发，我们需要考虑对于面对的应用场景，ACID是否是必须的。</p>
<p>比如银行应用就必须保证 ACID，否则一笔钱可能被使用两次；<br>又比如社交软件不必保证ACID，因为一条状态的更新对于所有用户读取先后时间有数秒不同并不影响使用</p>
<p>对于需要保证ACID的应用，我们可以优先考虑SQL。反之则可以优先考虑NoSQL</p>
<p><strong>扩展性对比</strong></p>
<p>NoSQL数据之间无关系，这样就非常容易扩展，也无形之间，在架构的层面上带来了可扩展的能力。比如 redis 自带主从复制模式、 哨兵模式、切片集群模式.</p>
<p>相反关系型数据库的数据之间存在关联性，水平扩展较难，需要解决跨服务器JOIN，分布式事务等问 题。</p>
<h2 id="数据库三大范式是什么"><a href="#数据库三大范式是什么" class="headerlink" title="数据库三大范式是什么"></a>数据库三大范式是什么</h2><p><strong>第一范式</strong>(1NF)：</p>
<p>要求数据库表的每一列都是不可分割的原子数据项</p>
<blockquote>
<p>例：家庭信息：5口人，北京—应该为—家庭人口数：5口人 &amp; 家庭住址：北京</p>
</blockquote>
<p><strong>第二范式</strong>(2NF)：</p>
<p>在1NF的基础上，非码属性必须完全依赖于候码(在1NF的基础上消除非主属性对主码的部分函数依赖)</p>
<p>第二范式需要确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）。</p>
<blockquote>
<p>主码：主码是从候选码中选择的一个属性或属性组，用于唯一标识元组。若候选码仅有一个，则它自动成为主码<br>候码：候选码是能够唯一标识关系中每个元组（记录）的最小属性或属性组。这里的“最小”指候选码的真子集不能成为候选码</p>
</blockquote>
<blockquote>
<p>例：产品数量、产品折扣、产品价格与”订单号”和”产品号”都相关，但是订单金额和订单时间仅与”订单号”相关，与”产品号”无关， 这样就不满足第二范式的要求，需分成两个表</p>
</blockquote>
<p><strong>第三范式</strong>（3NF）：</p>
<p>在2NF基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依<br>赖)</p>
<p>第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关。</p>
<blockquote>
<p>例：表中所有属性都完全依赖于学号，所以满足第二范式，但是”班主任性别”和”班主任年龄”直接依赖的是”班主任姓名”, 而不是主键”学号”，需分成两个表</p>
</blockquote>
<h2 id="MySQL怎么联表查询"><a href="#MySQL怎么联表查询" class="headerlink" title="MySQL怎么联表查询"></a>MySQL怎么联表查询</h2><p>数据库有四种联表查询类型：</p>
<blockquote>
<ol>
<li>内连接(INNER JOIN)</li>
<li>左外连接(LEFT JOIN)</li>
<li>右外连接(RIGHT JOIN)</li>
<li>全外连接(FULL JOIN)</li>
</ol>
</blockquote>
<ol>
<li><strong>内连接</strong>(INNER JOIN)： <ul>
<li>返回两个表中有匹配关系的行</li>
</ul>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT employees.name, departments.name</span><br><span class="line">FROM employees</span><br><span class="line">INNER JOIN departments</span><br><span class="line">ON employees.department_id = departments.id;</span><br></pre></td></tr></table></figure>
<p>这个查询返回每个员工及其所在部门的名字</p>
<ol start="2">
<li><strong>左外连接</strong>(LEFT JOIN)<ul>
<li>返回左表中的所有行，即使在右表中没有匹配的行。未匹配的右表列会包含NULL</li>
</ul>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT employees.name, departments.name</span><br><span class="line"> FROM employees</span><br><span class="line">LEFT JoIN departments</span><br><span class="line">ON employees.department_id = departments.id;</span><br></pre></td></tr></table></figure>
<p>这个查询返回每个员工及其所在部门的名字，包括没有分配部门的员工</p>
<ol start="3">
<li><strong>右外连接</strong>(RIGHT JOIN)<ul>
<li>返回右表中的所有行，即使在左表中没有匹配的行。未匹配的左表列会包含NULL</li>
</ul>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT employees.name, departments.name</span><br><span class="line"> FROM employees</span><br><span class="line">RIGHT JOIN departments</span><br><span class="line">ON employees.department_id = departments.id;</span><br></pre></td></tr></table></figure>
<p>这个查询返回每个员工及其所在部门的名字，包括没有分配员工的部门</p>
<ol start="4">
<li><strong>全外连接</strong>(FULL JOIN)<ul>
<li>返回两个表中的所有行，包括非匹配行。在MySQL中，FULL JOIN 需要使用 UNION来实现，因为MySQL 不支持FULL JOIN</li>
</ul>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT employees.name, departments.name</span><br><span class="line"> FROM employees</span><br><span class="line">LEFT JoIN departments</span><br><span class="line">ON employees.department_id = departments.id</span><br><span class="line"> </span><br><span class="line">UNION</span><br><span class="line"></span><br><span class="line">SELECT employees.name, departments.name</span><br><span class="line">FROM employees</span><br><span class="line">RIGHT JOIN departments</span><br><span class="line">ON employees.department_id = departments.id;</span><br></pre></td></tr></table></figure>
<p>这个查询返回所有员工和所有部门，包括没有匹配行的记录</p>
<h2 id="MySQL如何避免重复插入数据"><a href="#MySQL如何避免重复插入数据" class="headerlink" title="MySQL如何避免重复插入数据"></a>MySQL如何避免重复插入数据</h2><ol>
<li><strong>使用UNIQUE约束</strong></li>
</ol>
<p>在表的相关列添加上UNIQUE约束，确保每个值在该列中唯一</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE users(</span><br><span class="line">    id    INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    emai1 VARCHAR(255) UNIQUE,</span><br><span class="line">    name  VARCHAR(255)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>如果尝试插入重复的email，MySQL会返回错误</p>
<ol start="2">
<li><strong>使用INSERT … ON DUPLICATE KEY UPDATE</strong></li>
</ol>
<p>这中语句允许在插入记录时处理重复键的情况。如果插入记录与现有记录有冲突，可以自己选择更新现有记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO users (email, name)</span><br><span class="line">VALUES (&#x27;example@example.com&#x27;, &#x27;John Doe&#x27;)</span><br><span class="line">ON DUPLICATE KEY UPDATE name = VALUES(name);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>使用INSERT IGNORE</strong></li>
</ol>
<p>该语句会在插入记录时忽略那些因为重复键而发生的错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT IGNORE INTO users (email, name)</span><br><span class="line">VALUES (&#x27;example@example.com&#x27;, &#x27;John Doe&#x27;);</span><br></pre></td></tr></table></figure>
<p>如果email已经存在，这条插入语句将被忽略而不会返回错误</p>
<p>选择哪种方法取决于具体的需求：</p>
<ul>
<li>如果需要保证全局唯一性，使用UNIQUE约束是最佳做法</li>
<li>如果需要插入和更新结合可以使用ON DUPLICATE KEY UPDATE</li>
<li>对于快速忽略重复插入，INSERT IGNORE是合适的选择</li>
</ul>
<h2 id="CHAR-和-VARCHAR有什么区别"><a href="#CHAR-和-VARCHAR有什么区别" class="headerlink" title="CHAR 和 VARCHAR有什么区别"></a>CHAR 和 VARCHAR有什么区别</h2><ul>
<li>CHAR是固定长度的字符串类型，定义时需要指定固定长度，存储时会在末尾补足空格。<br>   CHAR适合存储长度固定的数据，如固定长度的代码、状态等，存储空间固定，对于短字符串效率较高。</li>
<li>VARCHAR是可变长度的字符串类型，定义时需要指定最大长度，实际存储时根据实际长度占用存储空间。<br>   VARCHAR适合存储长度可变的数据，如用户输入的文本、备注等，节约存储空间。</li>
</ul>
]]></content>
      <categories>
        <category>MySQL面试题</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
</search>
